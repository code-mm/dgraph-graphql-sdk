// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.3.71'
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("com.apollographql.apollo:apollo-gradle-plugin:1.3.2")

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


subprojects {
    def projectName = it.name

    if (projectName != "graphql-java-support") {
        apply from: "../gradle/dependencies.gradle"
    }

    buildscript {
        System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
        repositories {
            google()
            jcenter()
            maven { url "https://jitpack.io" }
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        }
    }

    repositories {
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url 'https://maven.google.com' }
    }

    if (projectName != "graphql-java-support") {
        apply plugin: 'checkstyle'

        checkstyle {
            toolVersion = "5.9"
            configFile rootProject.file('checkstyle.xml')
            configProperties = ['checkstyle.cache.file': rootProject.file('build/checkstyle.cache')]
            ignoreFailures false
            showViolations true
        }

        task checkstyle(type: Checkstyle) {
            source 'src/main/java'
            include '**/*.java'
            classpath = files()
        }

        afterEvaluate {
            if (project.tasks.findByName('check')) {
                check.dependsOn('checkstyle')
            }
        }
    }
}

project.ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}
